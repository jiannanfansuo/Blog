构建的环节：
1.清理：将以前编译得到的class字节码文件删除
2.编译：Java源程序——>class字节码文件
3.测试：自动测试
4.报告：测试程序的结果
5.打包：动态web工程打war包，Java工程打jar包
6.安装：maven特定的概念，将上一步的包复制到“仓库”
7.部署：将动态web工程生成的war包复制到servlet容器中使其可以运行


********************安装maven核心程序*************************

解压缩包
配置maven环境变量 MAVEN_HOME  path
mvn -v 查看版本

*********************maven常用命令**********************
具体的工作由插件来完成，插件本身不包含在maven核心程序中
当执行maven命令需要使用某些插件时，首先会到本地仓库中查找
本地仓库默认位置：[当前用户家目录]\.m2\repository
修改本地仓库的位置：
   maven解压目录--> conf--> settings.xml --> localRepository标签

                  mvn clran   清理
                  mvn compile   编译主程序
                  mvn test-compile    编译测试程序
                  mvn test    执行测试
                  mvn package   打包
                  mvn install    安装
                  mvn site    生成站点


***************Maven核心概念之约定的目录结构******************

HELLO(工程名)
  --src   //源码
     --main   //存放主程序
     ----java   //存放Java源文件
     ----resources  //存放框架或其他工具配置文件
     --test   //存放测试程序
     ----java
     ----resources
  --pom.xml   //maven工程核心配置文件

**************Maven核心概念之POM****************************

            POM: Project Object Model 项目对象模型

            POM.XML

**************Maven核心概念之坐标****************************

使用三个向量在仓库中唯一定位一个maven工程
Groupid   公司、组织域名倒序+项目名 com.wq.test
Artfactid   模块名
Version     版本

maven工程坐标与仓库中路径的对应关系



**************Maven核心概念之依赖****************************

   maven解析依赖时到本地仓库查找jar包
      自己开发的maven工程，使用mvn install 安装后就可以进入仓库

   依赖的范围
   主程序不可见测试程序的依赖，测试程序可见主程序的依赖
   主程序参与打包，测试程序不
      1.compile
            对主程序是否有效：有效
            对测试程序是否有效：有效
            是否参与打包：是
      2.test
            对主程序是否有效：无效
            对测试程序是否有效：有效
            是否参与打包：否
      3.provided
            
            对主程序是否有效：有效
            对测试程序是否有效：有效
            是否参与打包：否       //即不参与部署
      
            开发：需要    servlet-api.jar
            部署：忽略
            运行：由servlet提供
            

**************Maven核心概念之仓库****************************

            1.本地仓库
            2.远程仓库
                  -私服    Nexus
                  -中央仓库
                  -中央仓库镜像

            仓库中的内容：maven工程
                  1.maven自身需要的插件
                  2.第三方框架或者工具的jar包
                  3.自己开发的maven工程



***********Maven核心概念之生命周期/插件/目标*******************

      生命周期：
         1.保证各个构建环节执行的顺序
         2.maven的核心程序中定义了抽象的生命周期，各个阶段的具体任务由插件完成
      
      插件和目标
         1.生命周期的各个阶段定义了执行任务是什么
         2.各个阶段个插件的目标是对应的
         3.相似的目标由特定的插件来完成

**************Maven核心概念之继承****************************
**************Maven核心概念之聚合****************************
